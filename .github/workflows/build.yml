name: Build and Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-macos:
    name: Build (macOS)
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: brew install cairo pkg-config

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create Virtual Environment
        run: python3 -m venv .venv

      - name: Install Python Dependencies
        env:
          DYLD_LIBRARY_PATH: /opt/homebrew/lib:$DYLD_LIBRARY_PATH
          PKG_CONFIG_PATH: /opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH
        run: |
          source .venv/bin/activate
          pip install --upgrade pip
          # Set Cairo library paths for cairocffi
          export CAIRO_INCLUDE_PATH=/opt/homebrew/include/cairo
          export CAIRO_LIB_PATH=/opt/homebrew/lib
          # Use lighter CI requirements for faster builds
          pip install --timeout 300 -r requirements-ci.txt

      - name: Build Project
        env:
          DYLD_LIBRARY_PATH: /opt/homebrew/lib:$DYLD_LIBRARY_PATH
        run: make

      - name: Run Unit Tests
        run: make test-math

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cgame-macos
          path: build/cgame

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-macos
          path: build/cgame_tests_math

  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev pkg-config libgl1-mesa-dev libx11-dev libxi-dev libxcursor-dev libxrandr-dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create Virtual Environment
        run: python3 -m venv .venv

      - name: Install Python Dependencies
        run: |
          source .venv/bin/activate
          pip install --upgrade pip
          # Use lighter CI requirements for faster builds
          pip install --timeout 300 -r requirements-ci.txt

      - name: Build Project
        run: make

      - name: Run Unit Tests
        run: make test-math

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cgame-linux
          path: build/cgame

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-linux
          path: build/cgame_tests_math

  # Temporarily disabled due to compilation issues
  # TODO: Fix WebAssembly build compatibility
  build-wasm:
    name: Build (WebAssembly)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev pkg-config libgl1-mesa-dev libx11-dev libxi-dev libxcursor-dev libxrandr-dev

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v12
        with:
          version: 3.1.49

  #     - name: Build Project for WASM
  #       run: make wasm

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cgame-wasm
  #         path: build/
  #         glob: |
  #           build/cgame.html
  #           build/cgame.js
  #           build/cgame.wasm
  #           build/cgame.data

  test-suite:
    name: Unity Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libx11-dev libxi-dev libxcursor-dev libxrandr-dev

      - name: Build and Run Tests
        run: make test

      - name: Upload Test Executable
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unity-test-suite
          path: build/cgame_tests

      - name: Test Summary
        if: always()
        run: |
          echo "## Unity Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f build/cgame_tests ]; then
            echo "✅ Test executable built successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Test Output:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            ./build/cgame_tests 2>&1 || echo "Tests completed with exit code $?"
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Test executable build failed" >> $GITHUB_STEP_SUMMARY
          fi
