name: Release Pipeline

permissions:
  contents: write
  pull-requests: read
  issues: read
  actions: read

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  PROJECT_NAME: signal
  
jobs:
  version-and-tag:
    name: Version & Tag
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      previous_version: ${{ steps.version.outputs.previous_version }}
      release_created: ${{ steps.version.outputs.release_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Determine version bump
        id: version_bump
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Auto-determine from commit messages
            if git log --format=%B -n 1 | grep -q "BREAKING CHANGE\|feat!"; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif git log --format=%B -n 1 | grep -q "^feat"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get current version
        id: current_version
        run: |
          if [[ -f package.json ]]; then
            CURRENT=$(node -p "require('./package.json').version")
          else
            CURRENT="0.0.0"
          fi
          echo "current=$CURRENT" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: version
        run: |
          CURRENT="${{ steps.current_version.outputs.current }}"
          TYPE="${{ steps.version_bump.outputs.type }}"
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "previous_version=$CURRENT" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT
          
          # Update package.json
          if [[ -f package.json ]]; then
            node -e "
              const pkg = require('./package.json');
              pkg.version = '$NEW_VERSION';
              require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
            "
          fi

      - name: Create version.h
        run: |
          mkdir -p src
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$NEW_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          cat > src/version.h << EOF
          #ifndef VERSION_H
          #define VERSION_H
          
          #define CGAME_VERSION_MAJOR $MAJOR
          #define CGAME_VERSION_MINOR $MINOR
          #define CGAME_VERSION_PATCH $PATCH
          #define CGAME_VERSION_STRING "$NEW_VERSION"
          #define CGAME_BUILD_DATE "$(date -u +%Y-%m-%d)"
          #define CGAME_BUILD_TIME "$(date -u +%H:%M:%S)"
          
          #endif // VERSION_H
          EOF

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json src/version.h
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}" || exit 0

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin main --tags

  build-all-platforms:
    name: Build All Platforms
    needs: version-and-tag
    if: needs.version-and-tag.outputs.release_created == 'true'
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            artifact_name: signal-macos
            executable: signal
          - os: ubuntu-latest
            platform: linux
            artifact_name: signal-linux
            executable: signal
          - os: ubuntu-latest
            platform: wasm
            artifact_name: signal-wasm
            executable: signal.html
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup build environment (macOS)
        if: matrix.platform == 'macos'
        run: |
          brew install cairo pkg-config
          
      - name: Setup build environment (Linux)
        if: matrix.platform == 'linux' || matrix.platform == 'wasm'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev pkg-config libgl1-mesa-dev libx11-dev libxi-dev libxcursor-dev libxrandr-dev

      - name: Setup Emscripten (WASM)
        if: matrix.platform == 'wasm'
        uses: mymindstorm/setup-emsdk@v12
        with:
          version: 3.1.49

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python environment
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install --timeout 300 -r requirements-ci.txt

      - name: Build for platform
        run: |
          source .venv/bin/activate
          if [[ "${{ matrix.platform }}" == "wasm" ]]; then
            # Check if emcc is available
            if ! command -v emcc &> /dev/null; then
              echo "❌ Emscripten not found. WebAssembly build requires emcc."
              echo "This should be available via the setup-emsdk action."
              exit 1
            fi
            make wasm
          else
            make
          fi

      - name: Run tests
        if: matrix.platform != 'wasm'
        run: |
          make test-math || echo "Tests completed with warnings"

      - name: Prepare artifacts
        run: |
          mkdir -p dist
          if [[ "${{ matrix.platform }}" == "wasm" ]]; then
            # WebAssembly artifacts
            if [[ -f build/signal.html ]]; then
              cp build/signal.html dist/
            else
              echo "❌ signal.html not found"
              exit 1
            fi
            if [[ -f build/signal.js ]]; then
              cp build/signal.js dist/
            else
              echo "❌ signal.js not found"
              exit 1
            fi
            if [[ -f build/signal.wasm ]]; then
              cp build/signal.wasm dist/
            else
              echo "❌ signal.wasm not found"
              exit 1
            fi
            # Optional data file
            cp build/signal.data dist/ 2>/dev/null || echo "⚠️  Data file not found (optional)"
            
            echo "✅ WebAssembly artifacts prepared:"
            ls -la dist/
          else
            # Native binary artifacts
            if [[ -f build/${{ matrix.executable }} ]]; then
              cp build/${{ matrix.executable }} dist/
              strip dist/${{ matrix.executable }} || echo "⚠️  Strip not available"
              echo "✅ Native binary prepared:"
              ls -la dist/
            else
              echo "❌ Executable build/${{ matrix.executable }} not found"
              exit 1
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-v${{ needs.version-and-tag.outputs.new_version }}
          path: dist/
          retention-days: 90

  create-release:
    name: Create GitHub Release
    needs: [version-and-tag, build-all-platforms, manual-verification]
    if: needs.version-and-tag.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Package each platform
          cd artifacts
          for dir in signal-*-v${{ needs.version-and-tag.outputs.new_version }}; do
            if [[ -d "$dir" ]]; then
              platform=$(echo $dir | sed 's/signal-\(.*\)-v.*/\1/')
              if [[ "$platform" == "wasm" ]]; then
                cd "$dir"
                zip -r "../../release-assets/signal-${{ needs.version-and-tag.outputs.new_version }}-$platform.zip" .
                cd ..
              else
                cd "$dir"
                tar -czf "../../release-assets/signal-${{ needs.version-and-tag.outputs.new_version }}-$platform.tar.gz" .
                cd ..
              fi
            fi
          done
          
          cd ../release-assets
          ls -la

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -n "$LAST_TAG" ]]; then
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi
          
          # Format changelog
          cat > CHANGELOG.md << EOF
          # SIGNAL Engine v${{ needs.version-and-tag.outputs.new_version }}
          
          ## What's Changed
          
          $CHANGELOG
          
          ## Platform Support
          
          This release includes binaries for:
          - **macOS**: Intel and Apple Silicon
          - **Linux**: x86_64
          - **WebAssembly**: Browser-compatible build
          
          ## Features in this release
          
          - High-performance ECS (Entity-Component-System) architecture
          - Sokol-based graphics rendering with Metal/OpenGL support
          - Asset pipeline with binary mesh compilation
          - Memory management and optimization system
          - LOD (Level of Detail) system for performance
          - Scene management and scripting system
          - Camera system with multiple view types
          - Physics and collision detection
          - Performance monitoring and profiling
          
          ## Installation
          
          ### Native Builds
          Download the appropriate archive for your platform and extract it. The \`signal\` executable can be run directly.
          
          ### WebAssembly
          Extract the WebAssembly archive and serve the files from a web server. Open \`signal.html\` in a browser.
          
          ## Development
          
          For development builds, see the [Build Instructions](https://github.com/atimics/signal#building) in the README.
          EOF
          
          echo "changelog_file=CHANGELOG.md" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-and-tag.outputs.new_version }}
          name: SIGNAL Engine v${{ needs.version-and-tag.outputs.new_version }}
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: false
          files: "release-assets/*"

  notify-release:
    name: Notify Release
    needs: [version-and-tag, create-release]
    runs-on: ubuntu-latest
    if: needs.version-and-tag.outputs.release_created == 'true'
    steps:
      - name: Release Summary
        run: |
          echo "## 🚀 Release v${{ needs.version-and-tag.outputs.new_version }} Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Previous Version:** ${{ needs.version-and-tag.outputs.previous_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**New Version:** ${{ needs.version-and-tag.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Available Downloads:" >> $GITHUB_STEP_SUMMARY
          echo "- macOS Binary (tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Binary (tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "- WebAssembly Build (zip)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [View Release](https://github.com/atimics/signal/releases/tag/v${{ needs.version-and-tag.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Assets](https://github.com/atimics/signal/releases/latest)" >> $GITHUB_STEP_SUMMARY

  manual-verification:
    name: Manual Verification Required
    needs: [version-and-tag, build-all-platforms]
    if: needs.version-and-tag.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    # Note: Configure 'production' environment in GitHub repo settings for additional protection
    # This will require manual approval before releases are published
    steps:
      - name: Manual Verification Checklist
        run: |
          echo "## 🔍 Manual Verification Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Before this release can proceed, please verify the following:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎮 Engine Startup & Core Systems:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Engine starts without errors" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All systems initialize correctly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Memory system reports expected values" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Performance monitoring active" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Asset Pipeline:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Assets load successfully" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Texture rendering works correctly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Mesh rendering displays properly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Material assignments are correct" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎬 Scene Management:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Scene transitions work smoothly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Entity spawning functions correctly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Camera system operates as expected" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] UI responds to user input" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Performance & Stability:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Frame rate stable (60+ FPS target)" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Memory usage within expected bounds" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] No crashes during 5-minute test session" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Hot-reload functionality works (if enabled)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Cross-Platform Compatibility:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] macOS build functions correctly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Linux build functions correctly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] WebAssembly build loads and runs (when implemented)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Approve this environment to proceed with release creation.**"
